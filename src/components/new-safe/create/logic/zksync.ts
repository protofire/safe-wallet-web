import { ethers } from 'ethers'
import * as zk from 'zksync-web3'
import type { PredictSafeProps } from '@safe-global/safe-core-sdk/dist/src/safeFactory'
import { EMPTY_DATA, ZERO_ADDRESS } from '@safe-global/safe-core-sdk/dist/src/utils/constants'
import type { ChainInfo } from '@safe-global/safe-gateway-typescript-sdk'
import { LATEST_SAFE_VERSION } from '@/config/constants'
import {
  getReadOnlyFallbackHandlerContract,
  getReadOnlyGnosisSafeContract,
  getReadOnlyProxyFactoryContract,
} from '@/services/contracts/safeContracts'

// FIXME: ðŸ¤·
const UNKNOWN_BYTECODE =
  '0x0004000000000002000000000301001900000060033002700000003f04300197000300000041035500020000000103550000003f0030019d000100000000001f00000001012001900000000c0000c13d000000000100001900f500290000040f000000010100003900f500290000040f0000003f040000410000003f0510009c0000000001048019000000c0011002100000006003300210000000000113001900f500ec0000040f000000000301001900000060033002700001003f0030019d0003000000010355000000010120018f000000000001042d0000004001100210000000600220021000000000011200190000000001310019000000f60001042e0000003f030000410000003f0420009c00000000020380190000003f0410009c000000000103801900000040011002100000006002200210000000000112019f000000f7000104300001000000000002000000800300003900000040020000390000000000320435000000000110004c0000006b0000613d0000000001000416000000000110004c000000770000c13d000000020400036700000000030000310000001f0530018f00000000010204330000000506300270000000000760004c000000420000613d000000000700001900000005087002100000000009810019000000000884034f000000000808043b00000000008904350000000107700039000000000867004b0000003a0000413d000000000750004c000000510000613d0000000506600210000000000464034f00000000066100190000000305500210000000000706043300000000075701cf000000000757022f000000000404043b0000010005500089000000000454022f00000000045401cf000000000474019f000000000046043500000000041300190000000000420435000000200330008c000000770000413d00000000010104330000004003100197000000000130004c000000dc0000c13d0000006401400039000000440300004100000000003104350000004401400039000000450300004100000000003104350000002401400039000000220300003900000000003104350000004601000041000000000014043500000004014000390000002003000039000000000031043500000000010204330000000002140049000000840220003900f500200000040f000000000100001900f500f30000040f00000040021001970000000201000367000000000301043b000000410330009c0000007a0000c13d000000000020043500000020020000390000000001000019000000000300001900f5001b0000040f0000000001000019000000000200001900f500200000040f00000000030000310000001f0430018f0000000503300270000000000530004c000000870000613d00000000050000190000000506500210000000000761034f000000000707043b00000000007604350000000105500039000000000635004b000000800000413d000000000540004c000000950000613d00000003044002100000000503300210000000000503043300000000054501cf000000000545022f000000000131034f000000000101043b0000010004400089000000000141022f00000000014101cf000000000151019f000000000013043500000000030000310000000001000414000000040420008c000000b60000c13d000000030100036700000001020000310000001f0320018f0000000502200270000000000420004c000000a70000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000524004b000000a00000413d000000000430004c000000d80000613d00000003033002100000000502200210000000000402043300000000043401cf000000000434022f000000000121034f000000000101043b0000010003300089000000000131022f00000000013101cf000000000141019f0000000000120435000000d80000013d00f5000e0000040f000000030200036700000001030000310000001f0430018f0000000503300270000000000530004c000000c50000613d00000000050000190000000506500210000000000762034f000000000707043b00000000007604350000000105500039000000000635004b000000be0000413d000000000540004c000000d30000613d00000003044002100000000503300210000000000503043300000000054501cf000000000545022f000000000232034f000000000202043b0000010004400089000000000242022f00000000024201cf000000000252019f0000000000230435000000000110004c000000d80000c13d0000000102000031000000000100001900f500200000040f00000001020000310000000001000019000000000300001900f5001b0000040f0000000001000019000100000003001d00f500f30000040f00000042011001970000000102000029000000000121019f000000000200001900f500f10000040f000000200200003900000100010000390000000000210439000001200200003900000000000204390000004002000039000000430300004100f5001b0000040f000000ef002104250000000102000039000000000001042d0000000002000019000000000001042d000000000012041b000000000001042d000000000101041a000000000001042d000000f500000432000000f60001042e000000f700010430000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffff000000000000000000000000ffffffffffffffffffffffffffffffffffffffffa619486e00000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffff000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000006564000000000000000000000000000000000000000000000000000000000000496e76616c69642073696e676c65746f6e20616464726573732070726f76696408c379a000000000000000000000000000000000000000000000000000000000'

export async function computeNewSafeAddressZk(props: PredictSafeProps, chain: ChainInfo): Promise<string> {
  const readOnlySafeContract = getReadOnlyGnosisSafeContract(chain, LATEST_SAFE_VERSION)
  const readOnlyProxyContract = getReadOnlyProxyFactoryContract(chain.chainId)
  const readOnlyFallbackHandlerContract = getReadOnlyFallbackHandlerContract(chain.chainId)

  const proxyFactoryAddress = readOnlyProxyContract.getAddress()
  const fallbackHandlerAddress = readOnlyFallbackHandlerContract.getAddress()
  const singletonAddress = readOnlySafeContract.getAddress()

  const initializer = readOnlySafeContract.encode('setup', [
    props.safeAccountConfig.owners,
    props.safeAccountConfig.threshold,
    props.safeAccountConfig.to || ZERO_ADDRESS,
    props.safeAccountConfig.data || EMPTY_DATA,
    props.safeAccountConfig.fallbackHandler || fallbackHandlerAddress,
    props.safeAccountConfig.paymentToken || ZERO_ADDRESS,
    props.safeAccountConfig.payment || '0',
    props.safeAccountConfig.paymentReceiver || ZERO_ADDRESS,
  ])

  const salt = ethers.utils.solidityKeccak256(
    ['bytes32', 'uint256'],
    [ethers.utils.solidityKeccak256(['bytes'], [initializer]), props.safeDeploymentConfig.saltNonce],
  )

  const bytecode = UNKNOWN_BYTECODE
  const bytecodeHash = zk.utils.hashBytecode(bytecode)

  const input = new ethers.utils.AbiCoder().encode(['address'], [singletonAddress])

  return zk.utils.create2Address(proxyFactoryAddress, bytecodeHash, salt, input)
}
